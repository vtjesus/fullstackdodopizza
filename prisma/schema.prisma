//Генерация клиента и объяснение на каком языке он работает
generator client {
    provider = "prisma-client-js"
}

//Создание подклбчения базы данных, чтобы она знала что использовать и куда подключаться
datasource db {
    provider  = "postgresql"
    directUrl = env("POSTGRES_URL_NON_POOLING")
    url       = env("POSTGRES_URL")
}

//Создание таблицы User
model User {
    //Название поля     Тип     @уникальный айди     по умолчанию будет увеличиваться на +1
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     UserRole
    verified DateTime?

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    //Настраивается связь таблицы Category с таблицей Product
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id       Int    @id @default(autoincrement())
    name     String
    imageUrl String

    //Связь с таблицей Ingredients
    ingredients  Ingredient[]
    //Связь с таблицей ProductItem
    productItems ProductItem[]

    //Настраивается связь таблицы Product с таблицей Category 
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price Int

    //Опциональные поля, обозначаются с помощью '?'
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    products  Product[]
    cartItems CartItem[]
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    totalAmount Int @default(0)

    token String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int @default(1)

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//Модель заказа
model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus

    //Поле нужное для взаимодействия с платежными системами
    paymentId String?

    items Json

    fullName String
    email    String
    phone    String
    adress   String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
